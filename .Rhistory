ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1800),
breaks = seq(from = 0, to = 1800, by = 200)) +
scale_x_date(date_breaks = "2 weeks")
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1800),
breaks = seq(from = 0, to = 1800, by = 200)) +
scale_x_date(date_breaks = "2 weeks") +
theme(axis.text.x = element_text(angle = 90)) +
theme_minimal()
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1800),
breaks = seq(from = 0, to = 1800, by = 200)) +
scale_x_date(date_breaks = "2 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1800),
breaks = seq(from = 0, to = 1800, by = 200)) +
scale_x_date(date_breaks = "4 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
p_load(tidyverse, modeltime, lubridate, tidymodels, xgboost, timetk)
# forecast
exp.model <-
exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(weekly_sales ~ date, data = ts.data)
# forecast
exp.model <-
exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(weekly_sale ~ date, data = ts.data)
m4_monthly
# forecast
exp.model <-
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(weekly_sale ~ date, data = .)
ts.data <-
ts.data %>%
mutate(date = ymd(first_market_date_of_week))
# forecast
exp.model <-
exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(weekly_sale ~ date, data = ts.data)
model.plot <- modeltime_table(exp.model)
# forecast
exp.model <-
exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(weekly_sale ~ date, data = ts.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.plot <- modeltime_table(exp.model)
model.tbl <- modeltime_table(exp.model)
model.tbl %>%
modeltime_calibrate(new_data = ts.data) %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = m750
) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_calibrate(new_data = ts.data) %>%
modeltime_forecast(
new_data    = ts.data,
actual_data = m750
) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_calibrate(new_data = ts.data) %>%
modeltime_forecast(
new_data    = ts.data
) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl <- modeltime_table(exp.model)
model.tbl %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_forecast() %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_forecast(h = 4) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_calibrate() %>%
modeltime_forecast(h = 4) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_calibrate(new_data = ts.data) %>%
modeltime_forecast(h = 4) %>%
plot_modeltime_forecast(.interactive = FALSE)
splits <- initial_time_split(ts.data, prop = 0.9)
# forecast
exp.model <-
exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(weekly_sale ~ date, data = training(splits))
model.tbl %>%
modeltime_calibrate(new_data = testing(splits)) %>%
modeltime_forecast(h = 4) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_calibrate(new_data = testing(splits)) %>%
modeltime_forecast(new_data = testing(splits),
actual_data = ts.data,
h = 4) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_calibrate(new_data = testing(splits)) %>%
modeltime_forecast(new_data = testing(splits),
actual_data = ts.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
# forecast
exp.model <-
exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(weekly_sale ~ date, data = training(splits))
model.tbl <- modeltime_table(exp.model)
model.tbl %>%
modeltime_calibrate(new_data = testing(splits)) %>%
modeltime_forecast(new_data = testing(splits),
actual_data = ts.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1800),
breaks = seq(from = 0, to = 1800, by = 200)) +
scale_x_date(date_breaks = "4 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
model.tbl %>%
modeltime_calibrate(new_data = testing(splits)) %>%
modeltime_forecast(new_data = testing(splits),
actual_data = ts.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_calibrate(new_data = testing(splits)) %>%
modeltime_forecast(new_data = testing(splits),
actual_data = ts.data,
h = 4) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_calibrate(new_data = testing(splits)) %>%
modeltime_forecast(new_data = testing(splits),
actual_data = ts.data,
h = 4) %>%
plot_modeltime_forecast(.interactive = FALSE)
model.tbl %>%
modeltime_calibrate(new_data = testing(splits)) %>%
modeltime_forecast(new_data = testing(splits),
actual_data = ts.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
ts.data %>%
plot_time_series(date, weekly_sales, .interactive = interactive)
ts.data %>%
plot_time_series(date, weekly_sale, .interactive = interactive)
ts.data %>%
plot_time_series(date, weekly_sale)
library(pacman)
p_load(dplyr, DBI)
# Create a database table in memory
farmers.db <-
dbConnect(RMariaDB::MariaDB(),
group = "/Users/nickjenkins/Documents/Workshops & Conferences/SQL for Data Scientists/SQL for Data Scientists support files/FarmersMarketDatabase.sql",
username = "root",
password = "Hockeydude25",
host = "localhost",
port = 3306)
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1800),
breaks = seq(from = 0, to = 1800, by = 200)) +
scale_x_date(date_breaks = "4 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
library(pacman)
p_load(dplyr, DBI)
# Create a database table in memory
farmers.db <-
dbConnect(RMariaDB::MariaDB(),
group = "/Users/nickjenkins/Documents/Workshops & Conferences/SQL for Data Scientists/SQL for Data Scientists support files/FarmersMarketDatabase.sql",
username = "root",
password = "Hockeydude25",
host = "localhost",
port = 3306)
p_load(tidyverse, modeltime, lubridate, tidymodels, xgboost, timetk)
p_load(tidyverse, modeltime, lubridate, tidymodels, xgboost, timetk)
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1800),
breaks = seq(from = 0, to = 1800, by = 200)) +
scale_x_date(date_breaks = "4 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1800),
breaks = seq(from = 0, to = 1800, by = 200)) +
scale_x_date(date_breaks = "4 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
View(ts.data)
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "03/01/2020", date <= "11/22/2020")
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01", date <= "2020-11-22")
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01", date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1800),
breaks = seq(from = 0, to = 1800, by = 200)) +
scale_x_date(date_breaks = "4 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01", date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1250),
breaks = seq(from = 0, to = 1250, by = 50)) +
scale_x_date(date_breaks = "4 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01", date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(0, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "4 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01", date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(600, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "4 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01", date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(600, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "20 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01", date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(600, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "1 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01" & date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(600, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "1 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01" & date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line()
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01" & date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(600, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "1 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01" & date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line()
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01" & date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(550, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "1 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
# series plot
ts.data %>%
mutate(date = ymd(first_market_date_of_week)) %>%
filter(date >= "2020-03-01" & date <= "2020-11-22") %>%
ggplot(aes(x = date, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(580, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "1 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
ts.data <-
ts.data %>%
mutate(date = ymd(first_market_date_of_week))
ts.data %>%
plot_time_series(date, weekly_sale)
# split the data
splits <- initial_time_split(ts.data, prop = 0.8)
# exponential smoothing model
model.spec <-
exp_smoothing() %>%
set_engine("ets")
# series plot
ts.data %>%
filter(date >= "2020-03-01" & date <= "2020-11-22") %>%
ggplot(aes(x = first_market_date_of_week, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(580, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "1 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
exp.fit <-
model.spec %>%
fit(weekly_sale ~ first_market_date_of_week, data = training(splits))
exp.model
exp.fit
model.tbl <- modeltime_table(exp.fit)
model.tbl
model.tbl %>%
modeltime_calibrate(new_data = testing(splits)) %>%
modeltime_forecast(new_data = testing(splits),
actual_data = ts.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
# series plot
ts.data %>%
filter(date >= "2020-03-01" & date <= "2020-11-22") %>%
ggplot(aes(x = first_market_date_of_week, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(580, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "1 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
library(forecast)
exp.fit <- ses(ts.data, h = 3)
f.data <- window(ts.data, start = "2020-03-01")
install.packages("fpp2")
library(fpp2)
goog
# exponential smoothing model
exp.fit <-
exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(weekly_sale ~ first_market_date_of_week, data = training(splits))
# ARIMA model
arima.fit <-
arima_reg() %>%
set_engine(engine = "auto_arima") %>%
fit(weekly_sale ~ first_market_date_of_week, data = training(splits))
# create a model table
model.tbl <- modeltime_table(exp.fit, arima.fit)
model.tbl
model.tbl
# calibrate the model to the testing set
calibration.table <-
model.tbl %>%
modeltime_calibrate(new_data = testing(splits))
# visualize the forecast test
calibration.table %>%
modeltime_forecast(new_data = testing(splits),
actual_data = ts.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
# forecast forward
refit <-
calibration.table %>%
modeltime_refit(data = tsdata)
# forecast forward
refit <-
calibration.table %>%
modeltime_refit(data = ts.data)
refit %>%
modeltime_forecast(h = "3 weeks", actual_data = ts.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
refit
refit %>%
modeltime_forecast(h = "3 weeks", actual_data = ts.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
f.data <-
ts.data %>%
filter(date >= "2020-03-01" & date <= "2020-11-22")
# split the data
splits <- initial_time_split(f.data, prop = 0.8)
# exponential smoothing model
exp.fit <-
exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(weekly_sale ~ first_market_date_of_week, data = training(splits))
# ARIMA model
arima.fit <-
arima_reg() %>%
set_engine(engine = "auto_arima") %>%
fit(weekly_sale ~ first_market_date_of_week, data = training(splits))
# create a model table
model.tbl <- modeltime_table(exp.fit, arima.fit)
# calibrate the model to the testing set
calibration.table <-
model.tbl %>%
modeltime_calibrate(new_data = testing(splits))
# visualize the forecast test
calibration.table %>%
modeltime_forecast(new_data = testing(splits),
actual_data = f.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
# forecast forward
refit <-
calibration.table %>%
modeltime_refit(data = f.data)
refit %>%
modeltime_forecast(h = "3 weeks", actual_data = ts.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
refit %>%
modeltime_forecast(h = "3 weeks", actual_data = f.data) %>%
plot_modeltime_forecast(.interactive = FALSE)
library(pacman)
p_load(dplyr, DBI)
# Create a database table in memory
farmers.db <-
dbConnect(RMariaDB::MariaDB(),
group = "/Users/nickjenkins/Documents/Workshops & Conferences/SQL for Data Scientists/SQL for Data Scientists support files/FarmersMarketDatabase.sql",
username = "root",
password = "Hockeydude25",
host = "localhost",
port = 3306)
p_load(tidyverse, modeltime, lubridate, tidymodels, xgboost, timetk)
# series plot
ts.data %>%
filter(date >= "2020-03-01" & date <= "2020-11-22") %>%
ggplot(aes(x = first_market_date_of_week, y = weekly_sale)) +
geom_line() +
scale_y_continuous(limits = c(580, 1250),
breaks = seq(from = 600, to = 1250, by = 50)) +
scale_x_date(date_breaks = "1 weeks") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
library(pacman)
p_load(dplyr, DBI)
# Create a database table in memory
farmers.db <-
dbConnect(RMariaDB::MariaDB(),
group = "/Users/nickjenkins/Documents/Workshops & Conferences/SQL for Data Scientists/SQL for Data Scientists support files/FarmersMarketDatabase.sql",
username = "root",
password = "Hockeydude25",
host = "localhost",
port = 3306)
